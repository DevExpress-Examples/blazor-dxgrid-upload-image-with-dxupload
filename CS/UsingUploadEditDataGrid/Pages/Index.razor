@page "/"
@inject NavigationManager NavigationManager
@inject TestModelService _testModelService
@inject FileUrlStorageService _fileUrlStorageService

<div style="width:650px">
    <DxGrid Data="@Data" ShowFilterRow=false KeyFieldName="ID" PagerVisible="false" 
        EditModelSaving="OnEditModelSaving" DataItemDeleting="OnDataItemDeleting">
        <Columns>
            <DxGridCommandColumn Width="150px" />
            <DxGridDataColumn FieldName=@nameof(TestModel.Name) />
            <DxGridDataColumn FieldName=@nameof(TestModel.ImageUrl) Caption="Image">
                <CellDisplayTemplate>
                    <img style="max-width:300px" src="@context.Value" />
                </CellDisplayTemplate>
            </DxGridDataColumn>
        </Columns>
        <EditFormTemplate Context="EditFormContext">
            @{
                var item = (TestModel)EditFormContext.EditModel;
            }
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem Caption="Name:">
                    @EditFormContext.GetEditor("Name")
                </DxFormLayoutItem>
                <DxFormLayoutItem>
                    <img style="max-width:300px" src="@item.ImageUrl" />
                </DxFormLayoutItem>
                <DxFormLayoutItem>
                    <DxUpload Name="ImageUpload" FileUploaded="@((args) => OnFileUploaded(args, item))"
                        UploadUrl="@GetUploadUrl("/api/Upload/UploadFile/")" ChunkSize="20000"
                        ShowFileList="false" AllowedFileExtensions="@(new List<string> { ".jpg", ".jpeg", ".gif", ".png" })">
                    </DxUpload>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>
</div>

@code {
    object? Data { get; set; }

    protected override async Task OnInitializedAsync() {
        Data = await _testModelService.GetDataSourceAsync();
    }
    protected string GetUploadUrl(string url) {
        return NavigationManager.ToAbsoluteUri(url).AbsoluteUri;
    }
    protected void OnFileUploaded(FileUploadEventArgs args, TestModel item) {
        var fileUrl = _fileUrlStorageService.Get(Guid.Parse(args.FileInfo.Guid));
        item.ImageUrl = fileUrl;
    }
    async Task OnEditModelSaving(GridEditModelSavingEventArgs e) {
        var itemModel = (TestModel)e.EditModel;
        if(e.IsNew)
            await  _testModelService.Insert(itemModel);
        else
            await  _testModelService.Update((TestModel)e.DataItem, itemModel);
    }
    async Task OnDataItemDeleting(GridDataItemDeletingEventArgs e) {
        await _testModelService.Remove((TestModel)e.DataItem);
    }
}
